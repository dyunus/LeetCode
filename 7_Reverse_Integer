class Solution {
    public int reverse(int x) {
        int rev = 0;
        while(x != 0){
            int pop = x % 10; //get last digit
            x = x/10; // shift x to remove last digit
            if((rev > Integer.MAX_VALUE/10) //if reverse is already > MAX_VALUE/10, adding anything will overflow the range of int
               || (rev == Integer.MAX_VALUE/10 && pop > 7)){
                //if reverse is exactly MAX_VALUE/10, only 7 more is allowed to be added since max value is 2147483647
                //dividing max value by 10 yields 214748364 and shifting to the left yields 2147483640, now we can only add upto 7 safely
                return 0;
            }
            if((rev < Integer.MIN_VALUE/10)  //if reverse is already < MIN_VALUE/10, adding anything will overflow the range of int
               || (rev == Integer.MIN_VALUE/10 && pop < -8)){
                //if reverse is exactly MIN_VALUE/10, only -8 more is allowed to be added since max value is -2147483648
                //dividing min value by 10 yields -214748364 and shifting to the left yields -2147483640, now we can only add upto -8 safely
                return 0;
            }     
            rev = rev * 10 + pop;//shift current reversed to the left (by x10) and making room in the 0th place for the new digit
        }
        return rev;
    }
}
